// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// Check for compatibility between `uniffi` and `uniffi_bindgen` versions.
// Note that we have an error message on the same line as the assertion.
// This is important, because if the assertion fails, the compiler only
// seems to show that single line as context for the user.
uniffi::assert_compatible_version!("0.13.1"); // Please check that you depend on version 0.13.1 of the `uniffi` crate.

// Everybody gets basic buffer support, since it's needed for passing complex types over the FFI.

/// This helper allocates a new byte buffer owned by the Rust code, and returns it
/// to the foreign-language code as a `RustBuffer` struct. Callers must eventually
/// free the resulting buffer, either by explicitly calling the destructor defined below,
/// or by passing ownership of the buffer back into Rust code.
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_zcash_client_sqlite_e975_rustbuffer_alloc(
    size: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        uniffi::RustBuffer::new_with_size(size.max(0) as usize)
    })
}

/// This helper copies bytes owned by the foreign-language code into a new byte buffer owned
/// by the Rust code, and returns it as a `RustBuffer` struct. Callers must eventually
/// free the resulting buffer, either by explicitly calling the destructor defined below,
/// or by passing ownership of the buffer back into Rust code.
///
/// # Safety
/// This function will dereference a provided pointer in order to copy bytes from it, so
/// make sure the `ForeignBytes` struct contains a valid pointer and length.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_zcash_client_sqlite_e975_rustbuffer_from_bytes(
    bytes: uniffi::ForeignBytes,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        let bytes = bytes.as_slice();
        uniffi::RustBuffer::from_vec(bytes.to_vec())
    })
}

/// Free a byte buffer that had previously been passed to the foreign language code.
///
/// # Safety
/// The argument *must* be a uniquely-owned `RustBuffer` previously obtained from a call
/// into the Rust code that returned a buffer, or you'll risk freeing unowned memory or
/// corrupting the allocator state.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_zcash_client_sqlite_e975_rustbuffer_free(
    buf: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::call_with_output(call_status, || uniffi::RustBuffer::destroy(buf))
}

/// Reserve additional capacity in a byte buffer that had previously been passed to the
/// foreign language code.
///
/// The first argument *must* be a uniquely-owned `RustBuffer` previously
/// obtained from a call into the Rust code that returned a buffer. Its underlying data pointer
/// will be reallocated if necessary and returned in a new `RustBuffer` struct.
///
/// The second argument must be the minimum number of *additional* bytes to reserve
/// capacity for in the buffer; it is likely to reserve additional capacity in practice
/// due to amortized growth strategy of Rust vectors.
///
/// # Safety
/// The first argument *must* be a uniquely-owned `RustBuffer` previously obtained from a call
/// into the Rust code that returned a buffer, or you'll risk freeing unowned memory or
/// corrupting the allocator state.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_zcash_client_sqlite_e975_rustbuffer_reserve(
    buf: uniffi::RustBuffer,
    additional: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        use std::convert::TryInto;
        let additional: usize = additional
            .try_into()
            .expect("additional buffer length negative or overflowed");
        let mut v = buf.destroy_into_vec();
        v.reserve(additional);
        uniffi::RustBuffer::from_vec(v)
    })
}

// Error definitions, corresponding to `error` in the UDL.

struct FfiConverterErrorError;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterErrorError {
    type RustType = Error;

    fn write(obj: Error, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        match obj {
            Error::InvalidExtSk { .. } => {
                buf.put_i32(1);
            }
            Error::WrongNetwork { .. } => {
                buf.put_i32(2);
            }
        };
    }

    // If a variant doesn't have fields defined in the UDL, it's currently still possible that
    // the Rust enum has fields and they're just not listed.  Let's just punt on implementing
    // try_read() to avoid that case.  It should be no issue since passing back Errors into the
    // rust code isn't supported.
    fn try_read(_buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<Error> {
        panic!("try_read not supported for fieldless errors");
    }
}

impl uniffi::FfiError for FfiConverterErrorError {}

// Enum defitions, corresponding to `enum` in UDL.

struct FfiConverterEnumNetwork;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterEnumNetwork {
    type RustType = Network;

    fn write(obj: Self::RustType, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        match obj {
            Network::MainNetwork {} => {
                buf.put_i32(1);
            }
            Network::TestNetwork {} => {
                buf.put_i32(2);
            }
        };
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<Network> {
        use uniffi::deps::bytes::Buf;
        uniffi::check_remaining(buf, 4)?;
        Ok(match buf.get_i32() {
            1 => Network::MainNetwork,
            2 => Network::TestNetwork,
            v => uniffi::deps::anyhow::bail!("Invalid Network enum value: {}", v),
        })
    }
}

// Record definitions, implemented as method-less structs, corresponding to `dictionary` objects.

// Top level functions, corresponding to UDL `namespace` functions.

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn zcash_client_sqlite_e975_derive_spending_keys(
    seed: uniffi::RustBuffer,
    network: uniffi::RustBuffer,
    accounts: u32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("zcash_client_sqlite_e975_derive_spending_keys");

    uniffi::call_with_output(call_status, || {
        <std::vec::Vec<String> as uniffi::FfiConverter>::lower(derive_spending_keys(
            &<std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(seed).unwrap(),
            <FfiConverterEnumNetwork as uniffi::FfiConverter>::try_lift(network).unwrap(),
            <u32 as uniffi::FfiConverter>::try_lift(accounts).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn zcash_client_sqlite_e975_derive_extfvk(
    network: uniffi::RustBuffer,
    extsk: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("zcash_client_sqlite_e975_derive_extfvk");

    uniffi::call_with_result(call_status, || {
        let _retval = derive_extfvk(
            <FfiConverterEnumNetwork as uniffi::FfiConverter>::try_lift(network).unwrap(),
            &<String as uniffi::FfiConverter>::try_lift(extsk).unwrap(),
        )
        .map_err(Into::into)
        .map_err(<FfiConverterErrorError as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}
// Object definitions, correspoding to UDL `interface` definitions.

// Callback Interface defitions, corresponding to UDL `callback interface` definitions.
